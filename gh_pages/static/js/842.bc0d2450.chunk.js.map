{"version":3,"file":"static/js/842.bc0d2450.chunk.js","mappings":"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","sources":["helpers/functions.js","pages/HomePage.js"],"sourcesContent":["\nexport    const fillDensityColor = (ColorLegendsDataItem, density) => {\n  if (!ColorLegendsDataItem) return null;\n\n  // Check for density explicitly considering 0 as a valid value\n  if (density !== undefined && density !== null) {\n    const valueColorsMap = ColorLegendsDataItem.Value.map((value, index) => ({ value, color: ColorLegendsDataItem.Colors[index] }));\n\n    for (let i = 0; i < valueColorsMap.length; i++) {\n      if (density > valueColorsMap[i].value) {\n        return valueColorsMap[i].color;\n      }\n    }\n\n    // Default to the last color if no match found\n    return ColorLegendsDataItem.Colors[ColorLegendsDataItem.Colors.length - 1];\n  } else {\n    return \"white\";\n  }\n};\n\n\n\nexport const calculateAverageOfArray = (arr) => {\n  if (arr===\"NA\") {\n      return 0;\n  }\n  if (arr.length === 0) {\n    return 0;\n}\n\n  const sum = arr.reduce((total, num) => total + num, 0);\n  const average = sum / arr.length;\n  return parseFloat(average.toFixed(3));\n};\n","import React, { useEffect, useState } from 'react'\nimport { MapContainer, GeoJSON, TileLayer, LayersControl, FeatureGroup, Circle, } from 'react-leaflet'\nimport * as L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\"\nimport 'leaflet-fullscreen/dist/Leaflet.fullscreen.js';\nimport 'leaflet-fullscreen/dist/leaflet.fullscreen.css';\nimport BaseMap from '../components/BaseMap';\nimport { BaseMapsLayers, mapCenter, maxBounds, setDragging, setInitialMapZoom } from '../helpers/mapFunction';\nimport Buildings_Footprint from \"../assets/data/Buildings_Footprint.json\"\nimport BuildingData from \"../assets/data/BuildingData.json\"\n// import FiltererdJsonFeature from '../components/FiltererdJsonFeature.js';\n// import SelectedFeatureHeading from '../components/SelectedFeatureHeading.js';\nimport { useLoaderContext } from '../contexts/LoaderContext.js';\nimport BarChart from '../components/charts/BarChart.js';\nimport LineChart from '../components/charts/LineChart.js';\nimport MonthlyBarChart from '../components/charts/MonthlyBarChart.js';\nimport FiltererdJsonFeature from '../components/FiltererdJsonFeature.js';\nimport { fillDensityColor } from '../helpers/functions.js';\nimport DynamicLegend from '../components/legend/DynamicLegend.js';\nimport water_pressure_pipe from \"../assets/data/water_pressure_pipe.json\"\nimport water_pressure_structure from \"../assets/data/water_pressure_structure.json\"\nimport water_gravity_pipe from \"../assets/data/water_gravity_pipe.json\"\nimport BuildingTypeLegend from '../components/legend/BuildingTypeLegend.js';\n\n\n\n\nconst SingleSelectionsLayers = [\n    {\n        name: \"Utility Charges variation\",\n        value: \"utility_charges\",\n    },\n    {\n        name: \"Buildings\",\n        value: \"buildings\",\n    },\n\n\n\n]\n\nconst MultipleSelectionLayers = [\n    {\n        name: \"Water Gravity Pipe\",\n        value: \"water_gravity_pipe\",\n    },\n    {\n        name: \"Water Pressure Pipe\",\n        value: \"water_pressure_pipe\",\n    },\n    {\n        name: \"Water Pressure Structure\",\n        value: \"water_pressure_structure\",\n    },\n\n]\n\n\n\nconst HomePage = () => {\n    const [selectedBasemapLayer, setSelectedBasemapLayer] = useState(BaseMapsLayers[0]);\n    const [selectedBuilding, setSelectedBuilding] = useState(\"5201\");\n    const [selectedData, setSelectedData] = useState(null);\n    const [selectedYear, setSelectedYear] = useState('2023');\n\n    const [selectedSingleLayer, setSelectedSingleLayer] = useState(SingleSelectionsLayers[0].value);\n    const [selectedMultiLayer, setSelectedMultiLayer] = useState([SingleSelectionsLayers[0].value]);\n\n    const { setIsLoading } = useLoaderContext();\n\n\n    const handleMultiLayerSelection = (e) => {\n        const value = e.target.value;\n\n\n        // Allow multiple selections for multi-selection layers\n        if (selectedMultiLayer.includes(value)) {\n            setSelectedMultiLayer(selectedMultiLayer.filter((item) => item !== value));\n        } else {\n            setSelectedMultiLayer([...selectedMultiLayer, value]);\n        }\n\n    };\n\n    const handleSingleLayerSelection = (e) => {\n        const value = e.target.value;\n\n        // Set only the selected value, replacing any previous selection\n        setSelectedSingleLayer(value);\n    };\n\n\n\n\n    const handleBasemapSelection = (e) => {\n        const selectedItem = BaseMapsLayers.find((item) => item.name === e.target.value);\n        setSelectedBasemapLayer(selectedItem);\n    };\n\n    // const filterFeatureData = () => {\n    //     if (selectedFeatureName) {\n    //         const filteredData = BuildingData.find((data) => data.PrimaryID === parseInt(selectedFeatureName));\n    //         if (filteredData) {\n    //             setSelectedData(filteredData);\n    //         } else {\n    //             console.warn('No data found for the selected asset code:', selectedFeatureName);\n    //         }\n    //     }\n    // }\n\n\n    useEffect(() => {\n        const filterFeatureData = () => {\n            if (selectedBuilding) {\n                const filteredData = BuildingData.filter((data) => data.PrimaryID === parseInt(selectedBuilding));\n                if (filteredData) {\n                    setSelectedData(filteredData);\n                } else {\n                    console.warn('No data found for the selected asset code:', selectedBuilding);\n                }\n            }\n        };\n        filterFeatureData();\n    }, [selectedBuilding]);\n\n\n    const ColorLegendsDataItem = {\n        Title: \"Annual variation of utility charges\",\n        Unit: \"\",\n        Value: [80000, 60000, 40000, 20000, 10000, 5000, 0],\n        Colors: [\"#ca001b\", \"#ff7c3d\", \"#ffc469\", \"#fffbb1\", \"#c8ecf4\", \"#5ba8d2\", \"#345ead\"],\n\n    }\n\n    const BuiuldingNameColorItem = {\n        Title: \"Annual variation of utility charges\",\n        Unit: \"\",\n        Labels: [\"Chiller Sustainability Dist\", \"Chiller Opportunity Dist\", \"Chiller Mobility Dist\", \"Signatures\", \"F&B\", \"Common Area\"],\n        Colors: [\"#1f78b4\", \"#33a02c\", \"#e31a1c\", \"#ff7f00\", \"#6a3d9a\", \"#b15928\",],\n\n    }\n\n\n\n\n\n    function DistrictOnEachfeature(feature, layer) {\n        // Determine the property name to use based on selectedView\n\n        // Click event handler\n        layer.on('click', function (e) {\n            setSelectedBuilding(feature.properties[\"primaryID\"]);\n            if (feature.properties && feature.properties[\"primaryID\"]) {\n                const popupContent = `\n                    <div>\n                        Primary ID: ${feature.properties[\"primaryID\"]}<br/>\n                        District: ${feature.properties[\"district\"]}<br/>\n                        Building Name: ${feature.properties[\"blgNameEn\"]}<br/>\n                    </div>\n                `;\n                layer.bindTooltip(popupContent, { sticky: true });\n            }\n            layer.openTooltip();\n\n        });\n    }\n\n    const BuildingStyle = (feature) => {\n        // Define a color mapping for each `blgNameEn`\n        const colorMapping = {\n            \"Chiller Sustainability Dist\": \"#1f78b4\",\n            \"Chiller Opportunity Dist\": \"#33a02c\",\n            \"Chiller Mobility Dist\": \"#e31a1c\",\n            \"Signatures\": \"#ff7f00\",\n            \"F&B\": \"#6a3d9a\",\n            \"Common Area\": \"#b15928\"\n        };\n\n        // Get the color based on `blgNameEn`\n        const color = colorMapping[feature.properties['blgNameEn']] || \"#cccccc\"; // Default color if not matched\n\n        return {\n            fillColor: color,\n            weight: 2,\n            color: \"black\", // Border color\n            opacity: 1,\n            fillOpacity: 1,\n        };\n    };\n\n\n\n\n\n    const DistrictStyle = (feature) => {\n\n        const getDensityFromData = (id) => {\n            const DataItem = BuildingData && BuildingData.find((item) => item.PrimaryID === parseInt(id));\n            return DataItem && DataItem[`TOTAL_${selectedYear}`];\n        };\n\n        const density = getDensityFromData(feature.properties.primaryID);\n\n\n        return {\n            fillColor: fillDensityColor(ColorLegendsDataItem, density),\n            // fillColor: selectedTime !== '' ? Annual_Density(density) : \"none\",\n            weight: 1,\n            opacity: 1,\n            color: \"black\",\n            // dashArray: \"2\",\n            fillOpacity: 1,\n        };\n\n    };\n\n\n\n\n\n\n\n    return (\n        <div className='dasboard_page_container'>\n            <div className='main_dashboard'>\n\n\n                <div className='right_panel_equal' >\n                    <div className='card_container' style={{ height: \"100%\" }}>\n\n                        <MapContainer\n                            fullscreenControl={true}\n                            center={mapCenter}\n                            style={{ width: '100%', height: \"100%\", backgroundColor: 'white', border: 'none', margin: 'auto' }}\n                            zoom={setInitialMapZoom()}\n                            // maxBounds={maxBounds}\n                            zoomSnap={0.5}\n                            maxZoom={20}\n                            minZoom={setInitialMapZoom() - 1}\n                            keyboard={false}\n                            dragging={setDragging()}\n                            // attributionControl={false}\n                            // scrollWheelZoom={false}\n\n                            doubleClickZoom={false}\n                        >\n\n                            <div className='map_layer_manager'>\n                                <div className=\"accordion\" id=\"accordionPanelsStayOpenExample\">\n                                    <div className=\"accordion-item\">\n                                        <h2 className=\"accordion-header\" id=\"panelsStayOpen-headingOne\">\n                                            <button className=\"accordion-button map_layer_collapse \" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#panelsStayOpen-collapseOne\" aria-expanded=\"true\" aria-controls=\"panelsStayOpen-collapseOne\">\n                                                Base Map\n                                            </button>\n                                        </h2>\n                                        <div id=\"panelsStayOpen-collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"panelsStayOpen-headingOne\">\n                                            <div className=\"accordion-body map_layer_collapse_body\">\n                                                {BaseMapsLayers.map((option, index) => (\n                                                    <div key={index} className=\"form-check\">\n                                                        <input\n                                                            type=\"radio\"\n                                                            className=\"form-check-input\"\n                                                            id={option.name}\n                                                            name=\"data_type\"\n                                                            value={option.name}\n                                                            checked={selectedBasemapLayer?.name === option.name}\n                                                            onChange={handleBasemapSelection}\n                                                        />\n                                                        <label htmlFor={option.name}>{option.name}</label>\n                                                    </div>\n                                                ))}\n                                            </div>\n                                        </div>\n                                    </div>\n                                    <div className=\"accordion-item\">\n                                        <h2 className=\"accordion-header\" id=\"panelsStayOpen-headingTwo\">\n                                            <button className=\"accordion-button map_layer_collapse\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#panelsStayOpen-collapseTwo\" aria-expanded=\"true\" aria-controls=\"panelsStayOpen-collapseTwo\">\n                                                Layers\n                                            </button>\n                                        </h2>\n                                        <div id=\"panelsStayOpen-collapseTwo\" className=\"accordion-collapse collapse show\" aria-labelledby=\"panelsStayOpen-headingTwo\">\n                                            <div className=\"accordion-body map_layer_collapse_body\">\n\n                                                {SingleSelectionsLayers.map((item, index) => (\n                                                    <div key={index} className=\"form-check\">\n                                                        <input\n                                                            className=\"form-check-input\"\n                                                            type=\"radio\"\n                                                            id={item.value}\n                                                            value={item.value}\n                                                            checked={selectedSingleLayer.includes(item.value)}\n                                                            onChange={handleSingleLayerSelection}\n                                                        />\n                                                        <label htmlFor={item.value}>{item.name}</label>\n                                                    </div>\n                                                ))}\n                                                <hr />\n\n                                                {MultipleSelectionLayers.map((item, index) => (\n                                                    <div key={index} className=\"form-check\">\n                                                        <input\n                                                            className=\"form-check-input\"\n                                                            type=\"checkbox\"\n                                                            id={item.value}\n                                                            value={item.value}\n                                                            checked={selectedMultiLayer.includes(item.value)}\n                                                            onChange={(e) => handleMultiLayerSelection(e)} // Pass false for multi-selection\n                                                        />\n                                                        <label htmlFor={item.value}>{item.name}</label>\n                                                    </div>\n                                                ))}\n\n\n\n                                            </div>\n                                        </div>\n                                    </div>\n\n                                </div>\n                            </div>\n\n\n\n\n\n\n                            {selectedBasemapLayer && selectedBasemapLayer.url && (\n                                <TileLayer\n                                    key={selectedBasemapLayer.url}\n                                    attribution={selectedBasemapLayer.attribution}\n                                    url={selectedBasemapLayer.url}\n                                    subdomains={selectedBasemapLayer.subdomains}\n                                />\n                            )}\n\n\n                            {selectedSingleLayer === \"utility_charges\" && ColorLegendsDataItem && (\n                                <>\n                                    <DynamicLegend ColorLegendsDataItem={ColorLegendsDataItem} selectedYear={selectedYear} setSelectedYear={setSelectedYear} />\n\n                                    <GeoJSON\n                                        key={selectedYear}\n                                        // style={{ fillColor: '#265073', weight: 2, color: 'blue', fillOpacity: \"0.5\" }}\n                                        style={DistrictStyle}\n                                        data={Buildings_Footprint.features}\n                                        onEachFeature={DistrictOnEachfeature}\n                                    />\n                                    <FiltererdJsonFeature selectedFeatureName={selectedBuilding} />\n\n                                </>\n                            )}\n\n                            {selectedSingleLayer === \"buildings\" && (\n                                <>\n                                    <BuildingTypeLegend ColorLegendsDataItem={BuiuldingNameColorItem} />\n                                    <GeoJSON\n                                        key={selectedYear}\n                                        // style={{ fillColor: '#265073', weight: 2, color: 'blue', fillOpacity: \"0.5\" }}\n                                        style={BuildingStyle}\n                                        data={Buildings_Footprint.features}\n                                        onEachFeature={DistrictOnEachfeature}\n                                    />\n                                    <FiltererdJsonFeature selectedFeatureName={selectedBuilding} />\n\n                                </>\n                            )}\n\n                           \n\n                            \n\n                            {selectedMultiLayer.includes(\"water_gravity_pipe\") && (\n                                <>\n\n                                    <GeoJSON\n                                        data={water_gravity_pipe.features}\n                                        style={{\n                                            fillColor: 'none',\n                                            weight: 2,\n                                            color: 'blue',\n                                            interactive: true, // Ensure interaction is enabled for events\n                                        }}\n                                    // onEachFeature={(feature, layer) => {\n                                    //   // Click event handler\n                                    //   layer.on('hover', function (e) {\n                                    //     if (feature.properties && feature.properties[\"Layer\"]) {\n                                    //       const popupContent = `\n                                    //         <div>\n                                    //           Layer: ${feature.properties[\"Layer\"]}<br/>\n                                    //         </div>\n                                    //       `;\n                                    //       layer.bindTooltip(popupContent, { sticky: true });\n                                    //     }\n                                    //     layer.openTooltip();\n                                    //   });\n                                    // }}\n                                    />\n                                </>\n                            )}\n\n                            {selectedMultiLayer.includes(\"water_pressure_pipe\") && (\n                                <>\n                                    <GeoJSON data={water_pressure_pipe.features} style={{\n                                        fillColor: 'none',\n                                        weight: 2,\n                                        color: 'purple',\n                                        interactive: false\n                                    }} />\n\n                                </>\n                            )}\n\n                            {selectedMultiLayer.includes(\"water_pressure_structure\") && (\n                                <>\n                                    {water_pressure_structure && water_pressure_structure.features.map((item, index) => (\n                                        <Circle\n                                            key={index}\n                                            center={[\n                                                item.geometry.coordinates[1],\n                                                item.geometry.coordinates[0],\n                                            ]}\n                                            radius={2}\n                                            color=\"black\"\n                                            fillColor=\"blue\"\n                                            fillOpacity={0.6}\n                                        />\n                                    ))}\n\n                                </>\n                            )}\n\n\n\n\n                            <BaseMap />\n                        </MapContainer>\n                    </div>\n                </div>\n\n                <div className='left_panel_equal'>\n\n\n                    {/* <select className=\"form-select\" aria-label=\"Default select example\">\n                            <option selected>Open this select menu</option>\n                            <option value=\"1\">One</option>\n                            <option value=\"2\">Two</option>\n                            <option value=\"3\">Three</option>\n                        </select> */}\n\n\n                    {selectedData && (selectedSingleLayer === \"buildings\" || selectedSingleLayer === \"utility_charges\") && selectedData.length > 0 && (\n\n                        < >\n                            {selectedData.map((data, index) => (\n                                <div className='card_container' key={index}>\n                                    <div className='card_heading_container'>\n                                        <div className='card_heading'>\n                                            <h5>PrimaryID: {data.PrimaryID} | Zone: {data.Zone ? data.Zone: \"NA\"} | Building Name: {data.blgNameEn ? data.blgNameEn : \"NA\" }  </h5>\n                                        </div>\n                                    </div>\n\n\n\n                                    <div className='plots_heading_container'>\n                                        <div className='plots_heading'>\n                                            <h5>Annual Rates</h5>\n                                        </div>\n                                    </div>\n                                    <BarChart selectedData={data} />\n\n                                    <div className='plots_heading_container'>\n                                        <div className='plots_heading'>\n                                            <h5>Monthly Rates</h5>\n                                        </div>\n                                    </div>\n                                    <LineChart selectedData={data} />\n\n                                    <div className='plots_heading_container'>\n                                        <div className='plots_heading'>\n                                            <h5>Compare rates over years</h5>\n                                        </div>\n                                    </div>\n                                    <MonthlyBarChart\n                                        selectedData={data} />\n                                </div>\n                            ))}\n\n                        </>\n                    )}\n\n\n\n\n\n\n                </div>\n\n            </div>\n        </div>\n    )\n}\n\nexport default HomePage"],"names":["fillDensityColor","ColorLegendsDataItem","density","undefined","valueColorsMap","Value","map","value","index","color","Colors","i","length","SingleSelectionsLayers","name","MultipleSelectionLayers","HomePage","selectedBasemapLayer","setSelectedBasemapLayer","useState","BaseMapsLayers","selectedBuilding","setSelectedBuilding","selectedData","setSelectedData","selectedYear","setSelectedYear","selectedSingleLayer","setSelectedSingleLayer","selectedMultiLayer","setSelectedMultiLayer","setIsLoading","useLoaderContext","handleSingleLayerSelection","e","target","handleBasemapSelection","selectedItem","find","item","useEffect","filterFeatureData","filteredData","BuildingData","filter","data","PrimaryID","parseInt","console","warn","Title","Unit","DistrictOnEachfeature","feature","layer","on","properties","popupContent","bindTooltip","sticky","openTooltip","_jsx","className","children","_jsxs","style","height","MapContainer","fullscreenControl","center","mapCenter","width","backgroundColor","border","margin","zoom","setInitialMapZoom","zoomSnap","maxZoom","minZoom","keyboard","dragging","setDragging","doubleClickZoom","id","type","option","checked","onChange","htmlFor","includes","handleMultiLayerSelection","url","TileLayer","attribution","subdomains","_Fragment","DynamicLegend","GeoJSON","DataItem","getDensityFromData","primaryID","fillColor","weight","opacity","fillOpacity","Buildings_Footprint","onEachFeature","FiltererdJsonFeature","selectedFeatureName","BuildingTypeLegend","Labels","water_gravity_pipe","interactive","water_pressure_pipe","water_pressure_structure","features","Circle","geometry","coordinates","radius","BaseMap","Zone","blgNameEn","BarChart","LineChart","MonthlyBarChart"],"sourceRoot":""}