{"version":3,"file":"static/js/800.43945a28.chunk.js","mappings":"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","sources":["components/BaseMap.js","components/FiltererdJsonFeature.js","components/charts/BarChart.js","components/charts/LineChart.js","components/charts/MonthlyBarChart.js","components/legend/BuildingTypeLegend.js","components/legend/DynamicLegend.js","helpers/mapFunction.js"],"sourcesContent":["import React, { useState } from 'react'\nimport { TileLayer, GeoJSON, LayersControl, FeatureGroup, ScaleControl, useMap, useMapEvents, Circle } from 'react-leaflet'\n// import L from 'leaflet';\nimport { FaHome } from \"react-icons/fa\";\nimport { BaseMapsLayers, mapCenter, setInitialMapZoom } from '../helpers/mapFunction';\n\n\n\nconst BaseMap = () => {\n  const [mousePosition, setMousePosition] = useState({ lat: 0, lng: 0 });\n  const map = useMap();\n\n  const HandleMouseHover = () => {\n    useMapEvents({\n      mousemove: (e) => {\n        setMousePosition(e.latlng);\n      },\n    });\n    return null;\n  };\n\n\n  const handleZoomToCenter = () => {\n    map.setView(mapCenter, setInitialMapZoom());\n  };\n\n\n\n  return (\n    <>\n      \n\n\n      <HandleMouseHover />\n      {/* \n      <div\n        className='coordinates_container' >\n        Lat: {mousePosition.lat.toFixed(4)}, Long:{\" \"}\n        {mousePosition.lng.toFixed(4)}\n      </div> */}\n      <button className='zoom_btn' onClick={handleZoomToCenter}><FaHome /></button>\n      <ScaleControl />\n    </>\n  )\n}\n\nexport default BaseMap","import React, { useEffect } from 'react';\nimport { GeoJSON, Pane, useMap } from 'react-leaflet';\nimport * as L from 'leaflet';\nimport { mapCenter, setDragging, setInitialMapZoom } from '../helpers/mapFunction';\nimport Buildings_Footprint from \"../assets/data/Buildings_Footprint.json\"\n\nconst FiltererdJsonFeature = ({selectedFeatureName}) => {\n\n    const map = useMap();\n    const intialZoom = setInitialMapZoom()\n\n\n\n    let filteredData = Buildings_Footprint.features.find(\n        (feature) => feature.properties.primaryID === selectedFeatureName\n    );\n\n\n\n\n    return (\n        // <Pane name=\"selected_features\" style={{ zIndex: 1000 }}>\n        <Pane name=\"selected_features\">\n            <GeoJSON\n                key={`${selectedFeatureName}`}\n                style={{ fillColor: 'none', weight: 4, color: 'yellow', fillOpacity: \"0.4\" }}\n                data={filteredData}\n            />\n        </Pane>\n    );\n};\n\nexport default FiltererdJsonFeature;\n","import React from 'react';\nimport ReactApexChart from 'react-apexcharts';\n\n\nconst BarChart = ({selectedData}) => {\n\n    const xData = [\n        2019,2020,2021,2022,2023\n    ];\n\n    // Get corresponding values for each month\n    const yData = [\n        selectedData[\"TOTAL_2019\"], selectedData[\"TOTAL_2020\"], selectedData[\"TOTAL_2021\"], selectedData[\"TOTAL_2022\"], selectedData[\"TOTAL_2023\"], \n    ];\n\n\n    const options = {\n        chart: {\n            height: '100%',\n            type: 'bar',\n            zoom: {\n                enabled: false, // Disable zoom on scroll\n              },\n        },\n        plotOptions: {\n            bar: {\n                dataLabels: {\n                    position: 'top', \n                }\n            }\n        },\n\n        dataLabels: {\n            enabled: true,\n            formatter: function (val) {\n                return `${Math.round(val)}`;\n            },\n            offsetY: -20, \n            background: {\n                enabled: true,\n                foreColor: '#000', // Sets the text foreground color\n                borderRadius: 2,\n                padding: 4,\n                opacity: 0.7,\n                borderWidth: 1,\n                borderColor: '#fff'\n            }\n        },\n\n\n        stroke: {\n            curve: 'straight',\n            width: 2\n          },\n        series: [\n            {\n                name: 'Rates (AED)',\n                type: 'bar',\n                data: yData,\n                color: '#011a52',\n                \n            },\n        ],\n        xaxis: {\n            \n            categories: xData,\n            labels: {\n              rotate: 0,\n            },\n            tickPlacement: 'on',\n          },\n\n\n        yaxis: {\n            title: {\n                text: 'Rates (AED)'\n            },\n            labels: {\n                formatter: function (val) {\n                    return Math.round(val); // Rounds to the nearest integer\n                },\n            },\n        },\n        tooltip: {\n            shared: true,\n            intersect: false,\n\n        },\n\n    };\n\n    return (\n        <div>\n            <ReactApexChart options={options} series={options.series} type=\"bar\" />\n        </div>\n    );\n}\n\nexport default BarChart;\n","import React from 'react';\nimport ReactApexChart from 'react-apexcharts';\n\n\nconst LineChart = ({ selectedData }) => {\n\n    const xData = [\n        \"Jan-21\", \"Feb-21\", \"Mar-21\", \"Apr-21\", \"May-21\", \"Jun-21\", \"Jul-21\", \"Aug-21\", \"Sep-21\", \"Oct-21\", \"Nov-21\", \"Dec-21\",\n        \"Jan-22\", \"Feb-22\", \"Mar-22\", \"Apr-22\", \"May-22\", \"Jun-22\", \"Jul-22\", \"Aug-22\", \"Sep-22\", \"Oct-22\", \"Nov-22\", \"Dec-22\",\n        \"Jan-23\", \"Feb-23\", \"Mar-23\", \"Apr-23\", \"May-23\", \"Jun-23\", \"Jul-23\", \"Aug-23\", \"Sep-23\", \"Oct-23\", \"Nov-23\", \"Dec-23\",\n        \"Jan-24\", \"Feb-24\", \"Mar-24\", \"Apr-24\", \"May-24\", \"Jun-24\", \"Jul-24\", \"Aug-24\"\n    ];\n\n    // Get corresponding values for each month\n    const yData = [\n        selectedData[\"Jan-21\"], selectedData[\"Feb-21\"], selectedData[\"Mar-21\"], selectedData[\"Apr-21\"], selectedData[\"May-21\"], selectedData[\"Jun-21\"],\n        selectedData[\"Jul-21\"], selectedData[\"Aug-21\"], selectedData[\"Sep-21\"], selectedData[\"Oct-21\"], selectedData[\"Nov-21\"], selectedData[\"Dec-21\"],\n        selectedData[\"Jan-22\"], selectedData[\"Feb-22\"], selectedData[\"Mar-22\"], selectedData[\"Apr-22\"], selectedData[\"May-22\"], selectedData[\"Jun-22\"],\n        selectedData[\"Jul-22\"], selectedData[\"Aug-22\"], selectedData[\"Sep-22\"], selectedData[\"Oct-22\"], selectedData[\"Nov-22\"], selectedData[\"Dec-22\"],\n        selectedData[\"Jan-23\"], selectedData[\"Feb-23\"], selectedData[\"Mar-23\"], selectedData[\"Apr-23\"], selectedData[\"May-23\"], selectedData[\"Jun-23\"],\n        selectedData[\"Jul-23\"], selectedData[\"Aug-23\"], selectedData[\"Sep-23\"], selectedData[\"Oct-23\"], selectedData[\"Nov-23\"], selectedData[\"Dec-23\"],\n        selectedData[\"Jan-24\"], selectedData[\"Feb-24\"], selectedData[\"Mar-24\"], selectedData[\"Apr-24\"], selectedData[\"May-24\"], selectedData[\"Jun-24\"],\n        selectedData[\"Jul-24\"], selectedData[\"Aug-24\"]\n    ];\n\n    const options = {\n        chart: {\n            height: '100%',\n            type: 'line',\n            zoom: {\n                enabled: false, // Disable zoom on scroll\n            },\n        },\n        stroke: {\n            curve: 'straight',\n            width: 2\n        },\n        series: [\n            {\n                name: 'Rates (AED)',\n                type: 'line',\n                data: yData,\n                color: '#02ab6d',\n\n            },\n        ],\n        xaxis: {\n\n            categories: xData,\n            labels: {\n                rotate: -90,\n            },\n            tickPlacement: 'on',\n        },\n\n\n        yaxis: {\n            title: {\n                text: 'Rates (AED)'\n            },\n            labels: {\n                formatter: function (val) {\n                    return Math.round(val); // Rounds to the nearest integer\n                },\n            },\n        },\n        tooltip: {\n            shared: true,\n            intersect: false,\n        },\n\n    };\n\n    return (\n        <div>\n            <ReactApexChart options={options} series={options.series} type=\"line\" />\n        </div>\n    );\n}\n\nexport default LineChart;\n","import React, { useState } from 'react';\nimport ReactApexChart from 'react-apexcharts';\n\n\nconst MonthlyBarChart = ({ selectedData }) => {\n    const [selectedMonth, setSelectedMonth] = useState('Jan');\n\n    const handleMonthSelection = (e) => {\n        setSelectedMonth(e.target.value)\n    }\n\n    const xData = [2021, 2022, 2023];\n\n    // Define the y-axis data for each year\n    const yData = [\n        selectedData[`${selectedMonth}-21`] || 0, // Handle missing data with a default value of 0\n        selectedData[`${selectedMonth}-22`] || 0,\n        selectedData[`${selectedMonth}-23`] || 0,\n    ];\n\n    // Check if data for 2024 exists, and only add it if it exists\n    if (selectedData[`${selectedMonth}-24`] && selectedData[`${selectedMonth}-24`] !== undefined && selectedData[`${selectedMonth}-24`] !== null) {\n        xData.push(2024);\n        yData.push(selectedData[`${selectedMonth}-24`]);\n    }\n\n\n    const options = {\n        chart: {\n            height: '100%',\n            type: 'bar',\n            zoom: {\n                enabled: false, // Disable zoom on scroll\n              },\n        },\n        stroke: {\n            curve: 'straight',\n            width: 2\n        },\n        plotOptions: {\n            bar: {\n                dataLabels: {\n                    position: 'top', \n                }\n            }\n        },\n        dataLabels: {\n            enabled: true,\n            formatter: function (val) {\n                return `${Math.round(val)}`;\n            },\n            offsetY: -20, \n            background: {\n                enabled: true,\n                foreColor: '#000', // Sets the text foreground color\n                borderRadius: 2,\n                padding: 4,\n                opacity: 0.7,\n                borderWidth: 1,\n                borderColor: '#fff'\n            }\n        },\n        series: [\n            {\n                name: `${selectedMonth} rates (AED)`,\n                type: 'bar',\n                data: yData,\n                color: '#ba7c00',\n\n            },\n        ],\n        xaxis: {\n\n            categories: xData,\n            labels: {\n                rotate: 0,\n            },\n            tickPlacement: 'on',\n        },\n\n\n        yaxis: {\n            title: {\n                text: `Rates (AED) in ${selectedMonth} month`,\n            },\n            labels: {\n                formatter: function (val) {\n                    return Math.round(val); // Rounds to the nearest integer\n                },\n            },\n        },\n        tooltip: {\n            shared: true,\n            intersect: false,\n\n        },\n\n    };\n\n    return (\n        <>\n            <div className='chart_year_container' >\n                <label>Month: &nbsp; </label>\n                <select value={selectedMonth} onChange={handleMonthSelection} style={{ marginRight: \"10px\" }}>\n                    <option value=\"Jan\">January</option>\n                    <option value=\"Feb\">February</option>\n                    <option value=\"Mar\">March</option>\n                    <option value=\"Apr\">April</option>\n                    <option value=\"May\">May</option>\n                    <option value=\"Jun\">June</option>\n                    <option value=\"Jul\">July</option>\n                    <option value=\"Aug\">August</option>\n                    <option value=\"Sep\">September</option>\n                    <option value=\"Oct\">October</option>\n                    <option value=\"Nov\">November</option>\n                    <option value=\"Dec\">December</option>\n                </select>\n\n            </div>\n            <ReactApexChart options={options} series={options.series} type=\"bar\" />\n        </>\n    );\n}\n\nexport default MonthlyBarChart;\n","import React from 'react';\n\nconst BuildingTypeLegend = ({ ColorLegendsDataItem }) => {\n    const { Colors, Labels } = ColorLegendsDataItem;\n\n    const reversedColors = [...Colors].reverse();\n    const reversedLabels = [...Labels].reverse();\n\n\n\n\n\n    return (\n        <div className=\"legend_container\">\n            Buildings\n\n\n\n            <div className=\"legend-color-container\">\n\n\n\n                {reversedColors.map((color, index) => (\n                    <div key={index} className=\"legend_item\">\n                        <span\n                            className=\"legend_item_square\"\n                            style={{ backgroundColor: color }}\n                        />\n                        <span className=\"legend-label\">\n                            {reversedLabels[index]}\n                        </span>\n                    </div>\n                ))}\n\n                <div className=\"legend_item\">\n                    <span\n                        className=\"legend_item_square\"\n                        style={{ backgroundColor: \"#cccccc\" }}\n                    />\n                    <span className=\"legend-label\">\n                        Other\n                    </span>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default BuildingTypeLegend;\n","import React from 'react';\n\nconst DynamicLegend = ({ ColorLegendsDataItem, setSelectedYear, selectedYear }) => {\n    const { Title, Unit, Colors, Value } = ColorLegendsDataItem;\n\n    const reversedColors = [...Colors].reverse();\n    const reversedValues = [...Value].reverse();\n\n    const handleYearSelection = (e) => {\n        setSelectedYear(e.target.value)\n    }\n\n\n\n    return (\n        <div className=\"legend_container\">\n            Annual variation of utility charges (AED) in year &nbsp;\n            <select value={selectedYear} onChange={handleYearSelection} style={{ marginRight: \"10px\" }}>\n                <option value=\"2019\">2019</option>\n                <option value=\"2020\">2020</option>\n                <option value=\"2021\">2021</option>\n                <option value=\"2022\">2022</option>\n                <option value=\"2023\">2023</option>\n\n            </select>\n\n\n            <div className=\"legend-color-container\">\n            <div className=\"legend_item\">\n                <span\n                    className=\"legend_item_square\"\n                    style={{ backgroundColor: \"white\" }}\n                />\n                <span className=\"legend-label\">\n                    No Data\n                </span>\n                </div>\n\n\n                {reversedColors.map((color, index) => (\n                    <div key={index} className=\"legend_item\">\n                        <span\n                            className=\"legend_item_square\"\n                            style={{ backgroundColor: color }}\n                        />\n                        <span className=\"legend-label\">\n                            {index === reversedColors.length - 1 ? `> ${reversedValues[index]}` :\n                                // index === 0 ? `< ${reversedValues[index]}` :\n                                `${reversedValues[index]} — ${reversedValues[index + 1]}`}\n                        </span>\n                    </div>\n                ))}\n            </div>\n        </div>\n    );\n};\n\nexport default DynamicLegend;\n","import * as L from \"leaflet\";\n\nexport const BaseMapsLayers = [\n    {\n        name: \"Open Street Map\",\n        url: 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',\n        subdomains: ['a', 'b', 'c'],\n        attribution:'&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n      },\n    {\n        name: \"Google Map\",\n        url: 'https://{s}.google.com/vt/lyrs=m&x={x}&y={y}&z={z}',\n        subdomains: ['mt0', 'mt1', 'mt2', 'mt3'],\n        attribution: \"Basemap: &copy;2024 Google\"\n    },\n    {\n        name: \"Hybrid Map\",\n        url: 'https://{s}.google.com/vt/lyrs=s,h&x={x}&y={y}&z={z}',\n        subdomains: ['mt0', 'mt1', 'mt2', 'mt3'],\n        attribution: \"Basemap: &copy;2024 NASA, TerraMetrics <a href='https://www.google.com/intl/en-US_US/help/terms_maps/'> Terms</a>\"\n    },\n\n\n    // {\n    //     name: \"Street Map\",\n    //     url: 'https://server.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer/tile/{z}/{y}/{x}',\n    //     subdomains: ['a', 'b', 'c'],\n    //     attribution: 'Basemap: Esri, TomTom, FAO, NOAA, USGS'\n    // },\n\n\n\n\n    // {\n    //     name: \"Topographic Map\",\n    //     url: 'https://{s}.tile.opentopomap.org/{z}/{x}/{y}.png',\n    //     subdomains: ['a', 'b', 'c'],\n    //     attribution: 'Basemap:: &copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors, <a href=\"http://viewfinderpanoramas.org\">SRTM</a> </a>'\n    // },\n    // {\n    //     name: \"Satellite Map\",\n    //     url: 'https://{s}.google.com/vt/lyrs=s&x={x}&y={y}&z={z}',\n    //     subdomains: ['mt0', 'mt1', 'mt2', 'mt3'],\n    //     attribution: \"Basemap: &copy;2024 Google\"\n    // },\n    // {\n    //     name: \"Physical Map\",\n    //     url: 'https://server.arcgisonline.com/ArcGIS/rest/services/World_Physical_Map/MapServer/tile/{z}/{y}/{x}',\n    //     subdomains: ['a', 'b', 'c'],\n    //     attribution: \"Basemap: &copy; Esri &mdash; Source: US National Park Service\"\n    // },\n\n    // {\n    //     name: \"Terrain Map\",\n    //     url: 'https://{s}.google.com/vt/lyrs=p&x={x}&y={y}&z={z}',\n    //     subdomains: ['mt0', 'mt1', 'mt2', 'mt3'],\n    //     attribution: \"&copy;2024 Google\"\n    // },\n    // {\n    //     name: \"Google Roads Map\",\n    //     url: 'https://{s}.google.com/vt/lyrs=h&x={x}&y={y}&z={z}',\n    //     subdomains: ['mt0', 'mt1', 'mt2', 'mt3'],\n    //     attribution: \"&copy;2024 Google\"\n    // },\n\n]\n\n\n\n\n// export const mapCenter = [24.961018, 55.150827]\nexport const mapCenter = [24.961000, 55.15200]\n\nexport const setInitialMapZoom = () => {\n    var viewportWidth = window.innerWidth;\n    var mapZoom;\n    if (viewportWidth <= [767]) {\n        mapZoom = [16];\n    } if (viewportWidth >= [768]) {\n        mapZoom = [16];\n    } if (viewportWidth >= [1600]) {\n        mapZoom = [16];\n    }\n    return mapZoom;\n}\n\nexport const setDragging = () => {\n    var viewportWidth = window.innerWidth;\n    var dragging;\n    if (viewportWidth <= [767]) {\n        dragging = false;\n    } if (viewportWidth >= [768]) {\n        dragging = true;\n    }\n    return dragging;\n}\n\n\n\n\nexport const maxBounds = L.latLngBounds(\n    L.latLng(23, 49),  \n    L.latLng(43, 82)  \n);\n\n"],"names":["BaseMap","mousePosition","setMousePosition","useState","lat","lng","map","useMap","HandleMouseHover","useMapEvents","mousemove","e","latlng","_jsxs","_Fragment","children","_jsx","className","onClick","handleZoomToCenter","setView","mapCenter","setInitialMapZoom","FaHome","ScaleControl","_ref","selectedFeatureName","filteredData","Buildings_Footprint","find","feature","properties","primaryID","Pane","name","GeoJSON","style","fillColor","weight","color","fillOpacity","data","selectedData","options","chart","height","type","zoom","enabled","plotOptions","bar","dataLabels","position","formatter","val","Math","round","offsetY","background","foreColor","borderRadius","padding","opacity","borderWidth","borderColor","stroke","curve","width","series","xaxis","categories","labels","rotate","tickPlacement","yaxis","title","text","tooltip","shared","intersect","ReactApexChart","selectedMonth","setSelectedMonth","xData","yData","undefined","push","value","onChange","target","marginRight","ColorLegendsDataItem","Colors","Labels","reversedColors","reverse","reversedLabels","index","backgroundColor","setSelectedYear","selectedYear","Title","Unit","Value","reversedValues","length","BaseMapsLayers","url","subdomains","attribution","mapZoom","viewportWidth","window","innerWidth","setDragging","dragging","L"],"sourceRoot":""}