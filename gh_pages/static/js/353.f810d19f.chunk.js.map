{"version":3,"file":"static/js/353.f810d19f.chunk.js","mappings":"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","sources":["pages/DEWAConsumption.js"],"sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { MapContainer, GeoJSON, TileLayer, LayersControl, FeatureGroup, Circle, } from 'react-leaflet'\nimport * as L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\"\nimport 'leaflet-fullscreen/dist/Leaflet.fullscreen.js';\nimport 'leaflet-fullscreen/dist/leaflet.fullscreen.css';\nimport 'react-leaflet-markercluster/dist/styles.min.css';\nimport MarkerClusterGroup from 'react-leaflet-markercluster';\nimport BaseMap from '../components/BaseMap.js';\nimport { BaseMapsLayers, mapCenter, maxBounds, setDragging, setInitialMapZoom } from '../helpers/mapFunction.js';\n\n\n// import FiltererdJsonFeature from '../components/FiltererdJsonFeature.js';\n// import SelectedFeatureHeading from '../components/SelectedFeatureHeading.js';\nimport { useLoaderContext } from '../contexts/LoaderContext.js';\nimport BarChart from '../components/charts/BarChart.js';\nimport LineChart from '../components/charts/LineChart.js';\nimport MonthlyBarChart from '../components/charts/MonthlyBarChart.js';\nimport FiltererdJsonFeature from '../components/FiltererdJsonFeature.js';\nimport { calculateAverageOfArray, fillDensityColor } from '../helpers/functions.js';\nimport DynamicLegend from '../components/legend/DynamicLegend.js';\nimport water_pressure_pipe from \"../assets/data/water_pressure_pipe.json\"\nimport water_pressure_structure from \"../assets/data/water_pressure_structure.json\"\nimport water_gravity_pipe from \"../assets/data/water_gravity_pipe.json\"\nimport DEWA_energy_consumption from \"../assets/data/DEWA_energy_consumption.json\"\nimport DEWA_recovery from \"../assets/data/DEWA_recovery.json\"\nimport BuildingTypeLegend from '../components/legend/BuildingTypeLegend.js';\nimport ReactApexChart from 'react-apexcharts';\n\n\n\n\nconst SingleSelectionsLayers = [\n    {\n        name: \"DEWA Energy Consumption\",\n        value: \"energy_consumption\",\n        data: DEWA_energy_consumption\n    },\n    {\n        name: \"DEWA Recovery Accounts\",\n        value: \"recovery_accounts\",\n        data: DEWA_recovery\n    }\n\n,\n\n\n\n]\n\nconst MultipleSelectionLayers = [\n    {\n        name: \"Water Gravity Pipe\",\n        value: \"water_gravity_pipe\",\n    },\n    {\n        name: \"Water Pressure Pipe\",\n        value: \"water_pressure_pipe\",\n    },\n    {\n        name: \"Water Pressure Structure\",\n        value: \"water_pressure_structure\",\n    },\n\n]\n\n\n\nconst xData = [\n    \"Oct-21\", \"Nov-21\", \"Dec-21\",\n    \"Jan-22\", \"Feb-22\", \"Mar-22\", \"Apr-22\", \"May-22\", \"Jun-22\", \"Jul-22\", \"Aug-22\", \"Sep-22\", \"Oct-22\", \"Nov-22\", \"Dec-22\",\n    \"Jan-23\", \"Feb-23\", \"Mar-23\", \"Apr-23\", \"May-23\", \"Jun-23\", \"Jul-23\", \"Aug-23\", \"Sep-23\", \"Oct-23\", \"Nov-23\", \"Dec-23\",\n    \"Jan-24\", \"Feb-24\", \"Mar-24\", \"Apr-24\", \"May-24\", \"Jun-24\", \"Jul-24\", \"Aug-24\"\n];\n\n\n\n\nconst DEWAConsumption = () => {\n    const [selectedBasemapLayer, setSelectedBasemapLayer] = useState(BaseMapsLayers[0]);\n    const [selectedPoint, setSelectedPoint] = useState(\"3004574826\");\n    const [selectedPointData, setSelectedPointData] = useState(null);\n    const [selectedData, setSelectedData] = useState(SingleSelectionsLayers[0].data);\n    const [selectedYear, setSelectedYear] = useState('2023');\n\n    const [selectedSingleLayer, setSelectedSingleLayer] = useState(SingleSelectionsLayers[0].value);\n    const [selectedMultiLayer, setSelectedMultiLayer] = useState([SingleSelectionsLayers[0].value]);\n\n    const { setIsLoading } = useLoaderContext();\n\n\n    const handleMultiLayerSelection = (e) => {\n        const value = e.target.value;\n\n\n        // Allow multiple selections for multi-selection layers\n        if (selectedMultiLayer.includes(value)) {\n            setSelectedMultiLayer(selectedMultiLayer.filter((item) => item !== value));\n        } else {\n            setSelectedMultiLayer([...selectedMultiLayer, value]);\n        }\n\n    };\n\n    const handleSingleLayerSelection = (e) => {\n        const value = e.target.value;\n        setSelectedSingleLayer(value);\n        const selectedItem = SingleSelectionsLayers.find((item) => item.value === value)\n        setSelectedData(selectedItem.data)\n    };\n\n\n\n\n    const handleBasemapSelection = (e) => {\n        const selectedItem = BaseMapsLayers.find((item) => item.name === e.target.value);\n        setSelectedBasemapLayer(selectedItem);\n    };\n\n\n\n\n\n\n\n    useEffect(() => {\n        const filterFeatureData = () => {\n            if (selectedPoint && selectedData) {\n                const filteredData = selectedData.find((data) => data.ACCOUNT === selectedPoint);\n\n                if (filteredData) {\n                    setSelectedPointData(filteredData);\n                } else {\n                    setSelectedPointData(null);\n                }\n            }\n        };\n        filterFeatureData();\n    }, [selectedPoint, selectedData]);\n\n\n\n\n\n    const ColorLegendsDataItem = {\n        Title: \"Annual variation of utility charges\",\n        Unit: \"\",\n        Value: [80000, 60000, 40000, 20000, 10000, 5000, 0],\n        Colors: [\"#ca001b\", \"#ff7c3d\", \"#ffc469\", \"#fffbb1\", \"#c8ecf4\", \"#5ba8d2\", \"#345ead\"],\n\n    }\n\n    const BuiuldingNameColorItem = {\n        Title: \"Annual variation of utility charges\",\n        Unit: \"\",\n        Labels: [\"Chiller Sustainability Dist\", \"Chiller Opportunity Dist\", \"Chiller Mobility Dist\", \"Signatures\", \"F&B\", \"Common Area\"],\n        Colors: [\"#1f78b4\", \"#33a02c\", \"#e31a1c\", \"#ff7f00\", \"#6a3d9a\", \"#b15928\",],\n\n    }\n\n\n\n\n\n    function PointOnEachfeature(point, layer) {\n        setSelectedPoint(point[\"ACCOUNT\"]);\n        if (point && point[\"ACCOUNT\"]) {\n            const popupContent = `\n                    <div>\n                        ACCOUNT: ${point[\"ACCOUNT\"]}<br/>\n                        PREMISE NO.: ${point[\"PREMISE_NO\"]}<br/>\n                        CATEGORY: ${point[\"CATEGORY\"]}<br/>\n                    </div>\n                `;\n            layer.bindTooltip(popupContent, { sticky: true });\n        }\n        layer.openTooltip();\n\n    }\n\n    const PointStyle = (feature) => {\n        // Define a color mapping for each `blgNameEn`\n        const colorMapping = {\n            \"Only water readings\": \"#1f78b4\",\n            \"Only electricity readings\": \"#33a02c\",\n            \"Both water & electricity readings \": \"#eb9534\",\n        };\n\n        // Get the color based on `blgNameEn`\n        const color = colorMapping[feature.properties['blgNameEn']] || \"#cccccc\"; // Default color if not matched\n\n        return {\n            fillColor: color,\n            weight: 2,\n            color: \"black\", // Border color\n            opacity: 1,\n            fillOpacity: 1,\n        };\n    };\n\n\n\n\n\n\n\n\n\n\n\n\n\n    return (\n        <div className='dasboard_page_container'>\n            <div className='main_dashboard'>\n\n\n                <div className='right_panel_equal' >\n                    <div className='card_container' style={{ height: \"100%\" }}>\n\n                        <MapContainer\n                            fullscreenControl={true}\n                            center={mapCenter}\n                            style={{ width: '100%', height: \"100%\", backgroundColor: 'white', border: 'none', margin: 'auto' }}\n                            zoom={setInitialMapZoom()}\n                            // maxBounds={maxBounds}\n                            zoomSnap={0.5}\n                            // maxZoom={20}\n                            minZoom={setInitialMapZoom() - 1}\n                            keyboard={false}\n                            dragging={setDragging()}\n                            // attributionControl={false}\n                            // scrollWheelZoom={false}\n\n                            doubleClickZoom={false}\n                        >\n\n                            <div className='map_layer_manager'>\n                                <div className=\"accordion\" id=\"accordionPanelsStayOpenExample\">\n                                    <div className=\"accordion-item\">\n                                        <h2 className=\"accordion-header\" id=\"panelsStayOpen-headingOne\">\n                                            <button className=\"accordion-button map_layer_collapse \" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#panelsStayOpen-collapseOne\" aria-expanded=\"true\" aria-controls=\"panelsStayOpen-collapseOne\">\n                                                Base Map\n                                            </button>\n                                        </h2>\n                                        <div id=\"panelsStayOpen-collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"panelsStayOpen-headingOne\">\n                                            <div className=\"accordion-body map_layer_collapse_body\">\n                                                {BaseMapsLayers.map((option, index) => (\n                                                    <div key={index} className=\"form-check\">\n                                                        <input\n                                                            type=\"radio\"\n                                                            className=\"form-check-input\"\n                                                            id={option.name}\n                                                            name=\"data_type\"\n                                                            value={option.name}\n                                                            checked={selectedBasemapLayer?.name === option.name}\n                                                            onChange={handleBasemapSelection}\n                                                        />\n                                                        <label htmlFor={option.name}>{option.name}</label>\n                                                    </div>\n                                                ))}\n                                            </div>\n                                        </div>\n                                    </div>\n                                    <div className=\"accordion-item\">\n                                        <h2 className=\"accordion-header\" id=\"panelsStayOpen-headingTwo\">\n                                            <button className=\"accordion-button map_layer_collapse\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#panelsStayOpen-collapseTwo\" aria-expanded=\"true\" aria-controls=\"panelsStayOpen-collapseTwo\">\n                                                Layers\n                                            </button>\n                                        </h2>\n                                        <div id=\"panelsStayOpen-collapseTwo\" className=\"accordion-collapse collapse show\" aria-labelledby=\"panelsStayOpen-headingTwo\">\n                                            <div className=\"accordion-body map_layer_collapse_body\">\n\n                                                {SingleSelectionsLayers.map((item, index) => (\n                                                    <div key={index} className=\"form-check\">\n                                                        <input\n                                                            className=\"form-check-input\"\n                                                            type=\"radio\"\n                                                            id={item.value}\n                                                            value={item.value}\n                                                            checked={selectedSingleLayer.includes(item.value)}\n                                                            onChange={handleSingleLayerSelection}\n                                                        />\n                                                        <label htmlFor={item.value}>{item.name}</label>\n                                                    </div>\n                                                ))}\n                                                <hr />\n\n                                                {MultipleSelectionLayers.map((item, index) => (\n                                                    <div key={index} className=\"form-check\">\n                                                        <input\n                                                            className=\"form-check-input\"\n                                                            type=\"checkbox\"\n                                                            id={item.value}\n                                                            value={item.value}\n                                                            checked={selectedMultiLayer.includes(item.value)}\n                                                            onChange={(e) => handleMultiLayerSelection(e)} // Pass false for multi-selection\n                                                        />\n                                                        <label htmlFor={item.value}>{item.name}</label>\n                                                    </div>\n                                                ))}\n\n\n\n                                            </div>\n                                        </div>\n                                    </div>\n\n                                </div>\n                            </div>\n\n\n\n\n\n\n                            {selectedBasemapLayer && selectedBasemapLayer.url && (\n                                <TileLayer\n                                    key={selectedBasemapLayer.url}\n                                    attribution={selectedBasemapLayer.attribution}\n                                    url={selectedBasemapLayer.url}\n                                    subdomains={selectedBasemapLayer.subdomains}\n                                />\n                            )}\n\n\n\n\n                            {selectedSingleLayer === \"energy_consumption\" && (\n                                <MarkerClusterGroup>\n                                    {DEWA_energy_consumption && DEWA_energy_consumption.map((item, index) => {\n                                        if (item.X !== null && item.Y !== null) {\n                                            let fillColor;\n\n                                            if (item.WATER && item.WATER !== \"NA\" && item.ELECTRICITY !== \"NA\") {\n                                                fillColor = \"#eb9534\"; // Both water & electricity readings\n                                            } else if (item.WATER && item.WATER !== \"NA\" && item.ELECTRICITY === \"NA\") {\n                                                fillColor = \"#1f78b4\"; // Only water readings\n\n                                            } else if (item.WATER && item.WATER === \"NA\" && item.ELECTRICITY !== \"NA\") {\n                                                fillColor = \"#33a02c\"; // Only electricity readings\n                                            } else {\n                                                fillColor = \"#cccccc\"; // Default color if neither\n                                            }\n\n\n\n                                            return (\n                                                <Circle\n                                                    key={index}\n                                                    center={[item.X, item.Y]}\n                                                    radius={7}\n                                                    color=\"none\"\n                                                    fillColor={fillColor}\n                                                    fillOpacity={0.6}\n                                                    eventHandlers={{\n                                                        click: (e) => PointOnEachfeature(item, e.target) // Apply event handler\n                                                    }}\n                                                />\n                                            );\n                                        }\n                                        return null; // Return null if X or Y is null\n                                    })}\n                                </MarkerClusterGroup>\n                            )}\n\n\n\n\n\n                            {selectedSingleLayer === \"recovery_accounts\" && (\n                                <MarkerClusterGroup>\n                                    {DEWA_recovery && DEWA_recovery.map((item, index) => {\n                                        if (item.X !== null && item.Y !== null) {\n                                            let fillColor;\n                                            if (item.WATER !== \"NA\" && item.ELECTRICITY !== \"NA\") {\n                                                fillColor = \"#eb9534\"; // Both water & electricity readings\n                                            } else if (item.WATER !== \"NA\" && item.ELECTRICITY === \"NA\") {\n                                                fillColor = \"#1f78b4\"; // Only water readings\n                                            } else if (item.WATER === \"NA\" && item.ELECTRICITY !== \"NA\") {\n                                                fillColor = \"#33a02c\"; // Only electricity readings\n                                            } else {\n                                                fillColor = \"#cccccc\"; // Default color if neither\n                                            }\n                                            // console.log(item)\n\n                                            return (\n                                                <Circle\n                                                    key={index}\n                                                    center={[item.X, item.Y]}\n                                                    radius={7}\n                                                    color=\"none\"\n                                                    fillColor={fillColor}\n                                                    fillOpacity={0.6}\n                                                    eventHandlers={{\n                                                        click: (e) => PointOnEachfeature(item, e.target) // Apply event handler\n                                                    }}\n                                                />\n                                            );\n                                        }\n                                        return null; // Return null if X or Y is null\n                                    })}\n                                </MarkerClusterGroup>\n                            )}\n\n\n                            {(selectedSingleLayer === \"recovery_accounts\" || selectedSingleLayer === \"energy_consumption\") && (\n                                <div className=\"legend_container\">\n                                    Water and Electricity Consumption\n\n                                    <div className=\"legend-color-container\">\n                                        <div className=\"legend_item\">\n                                            <span className=\"legend_item_square\" style={{ backgroundColor: '#1f78b4' }} />\n                                            <span className=\"legend-label\">\n                                                Only water readings\n                                            </span>\n                                        </div>\n                                        <div className=\"legend_item\">\n                                            <span className=\"legend_item_square\" style={{ backgroundColor: '#33a02c' }} />\n                                            <span className=\"legend-label\">\n                                                Only electricity readings\n                                            </span>\n                                        </div>\n                                        <div className=\"legend_item\">\n                                            <span className=\"legend_item_square\" style={{ backgroundColor: '#eb9534' }} />\n                                            <span className=\"legend-label\">\n                                                Both water & electricity readings\n                                            </span>\n                                        </div>\n                                        <div className=\"legend_item\">\n                                            <span className=\"legend_item_square\" style={{ backgroundColor: 'red' }} />\n                                            <span className=\"legend-label\">\n                                                Selected Location\n                                            </span>\n                                        </div>\n\n                                    </div>\n                                </div>\n                            )}\n\n\n                            {selectedMultiLayer.includes(\"water_gravity_pipe\") && (\n                                <>\n\n                                    <GeoJSON\n                                        data={water_gravity_pipe.features}\n                                        style={{\n                                            fillColor: 'none',\n                                            weight: 2,\n                                            color: 'blue',\n                                            interactive: true, // Ensure interaction is enabled for events\n                                        }}\n                                    />\n                                </>\n                            )}\n\n                            {selectedPointData && selectedPointData.X !== null && selectedPointData.Y !== null &&\n                                <Circle\n                                    center={[selectedPointData.X, selectedPointData.Y]}\n                                    radius={7}\n                                    color=\"none\"\n\n                                    fillColor=\"red\"\n                                    fillOpacity={1}\n                                />\n                            }\n\n                            {selectedMultiLayer.includes(\"water_pressure_pipe\") && (\n                                <>\n                                    <GeoJSON data={water_pressure_pipe.features} style={{\n                                        fillColor: 'none',\n                                        weight: 2,\n                                        color: 'purple',\n                                        interactive: false\n                                    }} />\n\n                                </>\n                            )}\n\n                            {selectedMultiLayer.includes(\"water_pressure_structure\") && (\n                                <>\n                                    {water_pressure_structure && water_pressure_structure.features.map((item, index) => (\n                                        <Circle\n                                            key={index}\n                                            center={[\n                                                item.geometry.coordinates[1],\n                                                item.geometry.coordinates[0],\n                                            ]}\n                                            radius={2}\n                                            color=\"black\"\n                                            fillColor=\"blue\"\n                                            fillOpacity={0.6}\n                                        />\n                                    ))}\n\n                                </>\n                            )}\n\n\n\n\n                            <BaseMap />\n                        </MapContainer>\n                    </div>\n                </div>\n\n                <div className='left_panel_equal'>\n\n\n                    {/* <select className=\"form-select\" aria-label=\"Default select example\">\n                            <option selected>Open this select menu</option>\n                            <option value=\"1\">One</option>\n                            <option value=\"2\">Two</option>\n                            <option value=\"3\">Three</option>\n                        </select> */}\n\n                    {!selectedPointData &&\n                        <div className='card_container' >\n                            <p>Please select a location.</p>\n                        </div>}\n\n\n                    {selectedPointData && (selectedSingleLayer === \"recovery_accounts\" || selectedSingleLayer === \"energy_consumption\") && (\n\n                        < >\n                            <div className='card_container' >\n                                <div className='card_heading_container'>\n                                    <div className='card_heading'>\n                                        <h5>ACCOUNT: {selectedPointData.ACCOUNT} | Zone: {selectedPointData.Zone ? selectedPointData.Zone : \"NA\"} |\n                                            METER NO: {selectedPointData.METER_NO ? selectedPointData.METER_NO : \"NA\"} | PREMISE NO: {selectedPointData.PREMISE_NO ? selectedPointData.PREMISE_NO : \"NA\"} </h5>\n                                    </div>\n                                </div>\n\n\n                                {selectedPointData['ELECTRICITY'] !== \"NA\" && (\n                                    <>\n                                        <div className='plots_heading_container'>\n                                            <div className='plots_heading'>\n                                                <h5>Electricity Consumption (KWH)</h5>\n                                            </div>\n                                        </div>\n\n                                        <ReactApexChart\n                                            options={{\n                                                chart: {\n                                                    height: '100%',\n                                                    type: 'line',\n                                                    zoom: {\n                                                        enabled: false, // Disable zoom on scroll\n                                                    },\n                                                },\n                                                stroke: {\n                                                    curve: 'straight',\n                                                    width: 2,\n                                                },\n                                                xaxis: {\n                                                    categories: xData, // Make sure xData is defined in your component\n                                                    labels: {\n                                                        rotate: -90,\n                                                    },\n                                                    tickPlacement: 'on',\n                                                },\n                                                yaxis: {\n                                                    title: {\n                                                        text: 'Electricity Consumption (KWH)',\n                                                    },\n                                                    labels: {\n                                                        formatter: function (val) {\n                                                            return Math.round(val); // Rounds to the nearest integer\n                                                        },\n                                                    },\n                                                },\n                                                tooltip: {\n                                                    shared: true,\n                                                    intersect: false,\n                                                },\n                                            }}\n                                            series={[\n                                                {\n                                                    name: 'Electricity Consumption (KWH)',\n                                                    type: 'line',\n                                                    data: selectedPointData.ELECTRICITY,\n                                                    color: '#02ab6d',\n                                                },\n                                            ]}\n                                            type=\"line\"\n                                        />\n\n                                    </>\n\n                                )}\n\n                                {selectedPointData['WATER'] !== \"NA\" && (\n                                    <>\n                                        <div className='plots_heading_container'>\n                                            <div className='plots_heading'>\n                                                <h5>Water consumption (IG)</h5>\n                                            </div>\n                                        </div>\n\n\n\n                                        <ReactApexChart\n                                            options={{\n                                                chart: {\n                                                    height: '100%',\n                                                    type: 'line',\n                                                    zoom: {\n                                                        enabled: false, // Disable zoom on scroll\n                                                    },\n                                                },\n                                                stroke: {\n                                                    curve: 'straight',\n                                                    width: 2,\n                                                },\n                                                xaxis: {\n                                                    categories: xData, // Make sure xData is defined in your component\n                                                    labels: {\n                                                        rotate: -90,\n                                                    },\n                                                    tickPlacement: 'on',\n                                                },\n                                                yaxis: {\n                                                    title: {\n                                                        text: 'Water consumption (IG)',\n                                                    },\n                                                },\n                                                labels: {\n                                                    formatter: function (val) {\n                                                        return Math.round(val); // Rounds to the nearest integer\n                                                    },\n                                                },\n                                                tooltip: {\n                                                    shared: true,\n                                                    intersect: false,\n                                                },\n                                            }}\n                                            series={[\n                                                {\n                                                    name: 'Water consumption (IG)',\n                                                    type: 'line',\n                                                    data: selectedPointData.WATER,\n                                                    color: '#02ab6d',\n                                                },\n                                            ]}\n                                            type=\"line\"\n                                        />\n\n                                    </>\n\n                                )}\n\n\n\n\n\n\n                            </div>\n\n\n                        </>\n                    )}\n\n\n\n\n\n\n\n\n\n\n                </div>\n\n            </div>\n        </div>\n    )\n}\n\nexport default DEWAConsumption"],"names":["SingleSelectionsLayers","name","value","data","DEWA_energy_consumption","DEWA_recovery","MultipleSelectionLayers","xData","DEWAConsumption","selectedBasemapLayer","setSelectedBasemapLayer","useState","BaseMapsLayers","selectedPoint","setSelectedPoint","selectedPointData","setSelectedPointData","selectedData","setSelectedData","selectedYear","setSelectedYear","selectedSingleLayer","setSelectedSingleLayer","selectedMultiLayer","setSelectedMultiLayer","setIsLoading","useLoaderContext","handleSingleLayerSelection","e","target","selectedItem","find","item","handleBasemapSelection","useEffect","filterFeatureData","filteredData","ACCOUNT","PointOnEachfeature","point","layer","popupContent","bindTooltip","sticky","openTooltip","_jsx","className","children","_jsxs","style","height","MapContainer","fullscreenControl","center","mapCenter","width","backgroundColor","border","margin","zoom","setInitialMapZoom","zoomSnap","minZoom","keyboard","dragging","setDragging","doubleClickZoom","id","type","map","option","index","checked","onChange","htmlFor","includes","filter","handleMultiLayerSelection","url","TileLayer","attribution","subdomains","MarkerClusterGroup","X","Y","fillColor","WATER","ELECTRICITY","Circle","radius","color","fillOpacity","eventHandlers","click","_Fragment","GeoJSON","water_gravity_pipe","weight","interactive","water_pressure_pipe","water_pressure_structure","features","geometry","coordinates","BaseMap","Zone","METER_NO","PREMISE_NO","ReactApexChart","options","chart","enabled","stroke","curve","xaxis","categories","labels","rotate","tickPlacement","yaxis","title","text","formatter","val","Math","round","tooltip","shared","intersect","series"],"sourceRoot":""}